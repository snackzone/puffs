#!/usr/bin/env ruby

require 'rubygems'
require 'thor'

class Generate < Thor
  desc "model <name>", "generate a model with the specified name."
  def model(name)
    m_name = name.capitalize

    #writes model file
    File.open("./app/models/#{m_name.downcase}.rb", "w") do |f|
      f.write("class #{m_name} < Puffs::SQLObject\n\n")
      f.write("end\n")
      f.write("#{m_name}.finalize!")
    end
    migration("Create#{m_name}")
    puts "#{m_name} model created"
  end

  desc "controller <name>", "generate a controller with the specified name."
  def controller(name)
    c_name = name.capitalize

    #Writes controller file
    File.open("./app/controllers/#{c_name.downcase}.rb", "w") do |f|
      f.write("Dir.glob('./app/models/*.rb') { |file| require file }\n\n")

      f.write("class #{c_name}Controller < Puffs::ControllerBase\n\n")
      f.write("end")
    end

    #creates empty views directory
    Dir.mkdir "./app/views/#{c_name.downcase}"
    puts "#{c_name} controller created"
  end

  desc "migration <name>", "generates an empty sql file with a filename of the specified <name> appended to a timestamp"
  def migration(name)
    #create a timestamp
    ts = Time.now.to_s.split(" ").take(2).join("").split("").map{|el| el.to_i}.join
    require 'active_support/inflector'
    filename = "#{ts}__#{name.underscore.downcase}"

    #create the migration file
    File.open("./db/migrate/#{filename}.sql", "w") do |f|
      f.write ("CREATE TABLE IF NOT EXISTS #{name} (\n")
      f.write ("\tid SERIAL PRIMARY KEY,\n")
      f.write ("\tname VARCHAR(255) NOT NULL")
      f.write (");")
    end
  end
end

class Db < Thor
  desc "create", "creates the DB"
  def create
    require_relative '../lib/db_connection'
    DBConnection.reset
    puts 'db created!'
  end

  desc "migrate", "runs pending migrations"
  def migrate
    require_relative '../lib/db_connection'
    DBConnection.migrate
    puts "migrated!"
  end

  desc "seed", "seeds the DB"
  def seed
    require 'puffs'
    require './db/seeds'
    Seed.populate
    puts 'db seeded!'
  end

  desc "reset", "resets the DB and seeds it"
  def reset
    create
    migrate
    seed
    puts 'db reset!'
  end
end

class Puffs < Thor
  desc "generate", "subcommand used for generating models and controllers"
  subcommand 'generate', Generate

  desc "g", "alias of generate subcommand"
  subcommand 'g', Generate

  desc 'server', 'starts the Puffs server'
  def server
    require_relative '../lib/server_connection'
    ServerConnection.start
  end

  desc 'new', 'creates a new Puffs app'
  def new(name)
    Dir.mkdir "./#{name}"
    Dir.mkdir "./#{name}/app"
    Dir.mkdir "./#{name}/app/models"
    Dir.mkdir "./#{name}/app/views"
    Dir.mkdir "./#{name}/app/controllers"
    File.open("./#{name}/app/controllers/application_controller.rb", "w") do |f|
      f.write File.read(File.expand_path('../../template/app/controllers/application_controller.rb', __FILE__))
    end
    Dir.mkdir "./#{name}/config"
    File.open("./#{name}/config/routes.rb", "w") do |f|
      f.write File.read(File.expand_path('../../template/config/routes.rb', __FILE__))
    end
    Dir.mkdir "./#{name}/db"
    Dir.mkdir "./#{name}/db/migrate"
    File.open("./#{name}/db/seeds.rb", "w") do |f|
      f.write File.read(File.expand_path('../../template/db/seeds.rb', __FILE__))
    end
    File.open("./#{name}/Gemfile", "w") do |f|
      f.write File.read(File.expand_path('../../template/Gemfile', __FILE__))
    end
  end
end

Puffs.start
Db.start
Generate.start
